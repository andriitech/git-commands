#!/bin/bash

######################################## SET VALUES ###########################################
readonly TRUE=0
readonly FALSE=1
readonly TEXT_RED='\033[0;31m'
readonly TEXT_YELLOW='\033[0;33m'
readonly TEXT_BLUE='\033[0;34m'
readonly TEXT_NC='\033[0m'
readonly BACKGROUND_YELLOW=$'\e[43;5;33m'
readonly BACKGROUND_NC=$'\e[0m'



######################################### HELPERS ##############################################

# Find and return branches
function find_branches {
    local _target="$1"
    local _branches=($(git branch -ila "*$_target*")) || true  # Find branches with similar name

    # Exit script if no matching branches are found
    if [[ ${#_branches[@]} -eq 0 ]]; then
        echo -e "${TEXT_RED}Error${TEXT_NC}: No branches found matching the name ${TEXT_YELLOW}$_target${TEXT_NC}"
        exit $FALSE
    fi

    # Check if the array contains an asterisk
    if [[ "${_branches[*]}" == *"*"* ]]; then
        echo -e "${TEXT_RED}Error${TEXT_NC}: You are on this branch"
        exit $FALSE
    fi

    echo "${_branches[@]}"
}

function find_branch_stash {
    local _branch="$1"
    while IFS= read -r line; do
        _stash_list+=("$line")
    done < <(git stash list | grep "$_branch")

    # Exit script if no stashes
    if [[ ${#_stash_list[@]} -eq 0 ]]; then
        exit $TRUE
    fi

    echo "${_stash_list[@]}"
}

# Return whether there are unsaved changes in the working directory
function are_unsaved_files_present {
    local _files=$(git diff-index HEAD) || true 
    if [[ -n "$_files" ]]; then
        return $TRUE
    else
        return $FALSE
    fi
}

function handle_unsaved_file {
    are_unsaved_files_present
    if [[ $? -eq $TRUE ]]; then
        read -rp "There are unsaved changes in the working directory. Stash (s) or ignore (i)? : " answer
        case "$answer" in
            stash|[sS])
                git stash save "stash for $(git rev-parse --abbrev-ref HEAD)" || exit $FALSE
                printf 'Unsaved changes have been stashed.\n';;
#            commit|[cC])
#                read -rp "Please provide a commit message: " commit_message
#                git add . || exit $FALSE
#                git commit -m "$commit_message" || exit $FALSE
#                printf 'Unsaved changes have been committed with message: %s\n' "$commit_message";;
            ignore|[iI])
                git reset --hard HEAD || exit $FALSE;;
            *)
                printf 'Invalid option. No changes were made.\n'
                exit $FALSE;;
        esac
    fi
}

# Return array with higlighted elements
function prepare_options {
    local _options=("$@")                         # convert function arguments to array
    local _target=${_options[${#_options[@]}-1]}  # last element of array is the target keyword
    local _result=()                              # create a new array for the results
    unset '_options[${#_options[@]}-1]'           # remove keyword from array of options

    local _lower=$(echo "$_target" | tr '[:lower:]' '[:upper:]')
    local _upper=$(echo "$_target" | tr '[:upper:]' '[:lower:]' )
    # Loop over each element in the array and perform a case-insensitive comparison
    for _option in "${_options[@]}"; do
        #TODO::if option is current branch color it in green
        if [[ "$_option" == ${_target} ]]; then
            _result+=("${_option/$_target/$'${BACKGROUND_YELLOW}$_target${BACKGROUND_NC}'}")
        elif [[ "$_option" =~ ${_lower} ]]; then
            _result+=("${_option/$_lower/$'${BACKGROUND_YELLOW}$_lower${BACKGROUND_NC}'}") #highlight the given keyword
        else
            _result+=("${_option/$_upper/$'${BACKGROUND_YELLOW}$_upper${BACKGROUND_NC}'}") #highlight the given keyword
        fi
    done

    echo "${_result[@]}"
}

function select_option {
    local _options=("$@")
    if [[ ${#_options[@]} -gt 1 ]]; then
        select _option in "${_options[@]}"; do
            if [[ "${_options[@]}" =~ "${_option}" ]]; then     # Whether selected option is in the list of options
                break
            else
                echo "Invalid option. Please select a valid option."
            fi
        done
    elif [[ ${#_options[@]} -eq 1 ]]; then
        _option=${_options[0]}
    else
        exit 1;
    fi

    echo "${_option}"
}

# Removes any occurrences of the HIGHLIGHT_YELLOW and HIGHLIGHT_NC escape sequences from the target
function remove_highlight {
    local _target="$1"
    _target=${_target/${BACKGROUND_YELLOW}}
    _target=${_target/${BACKGROUND_NC}}

    echo "$_target"
}

function swich_to {
    local _branch="$1"  
    git checkout "${_branch}" || exit $FALSE; 
    printf 'Checked out to branch %s.\n' "$_branch"
}

function handle_stash {
    local _target="$1"

    while IFS= read -r line; do
        _stash_list+=("$line")
    done < <(git stash list | grep "$_target")

    # Pop if only one stash
    if [ ${#_stash_list[@]} -eq 1 ]; then
        local _stash=${_stash_list[0]%%:*}                                     # remove evetying after first `:`
        local _index=$(echo "$_stash" | sed -nE 's/stash@\{([0-9]+)\}/\1/p')   # parse stash index
        git stash pop --index "${_index}"
    fi

    # Select if more then one
    if [ ${#_stash_list[@]} -gt 1 ]; then
        echo -e "${TEXT_BLUE} Multiple stash records detected (0 for exit): ${TEXT_NC}"
        local _options=()
        local _lower=$(echo "$_target" | tr '[:lower:]' '[:upper:]')
        local _upper=$(echo "$_target" | tr '[:upper:]' '[:lower:]' )
        #TODO:: use prepare_options
        for _option in "${_stash_list[@]}"; do
            if [[ "$_option" =~ ${_lower} ]]; then
                _options+=("${_option/$_lower/$'${BACKGROUND_YELLOW}$_lower${HIGHLIGHT_NC}'}")
            else
                _options+=("${_option/$_upper/$'${BACKGROUND_YELLOW}$_upper${HIGHLIGHT_NC}'}")
            fi
        done

        select _option in "${_options[@]}"; do
            if [[ -n $_option ]]; then
                local _stash=${_option%%:*}                                             # remove evetying after first `:`
                local _index=$(echo "$_stash" | sed -nE 's/stash@\{([0-9]+)\}/\1/p')    # parse stash index 
                git stash pop --index "${_index}"
                break
            else
                exit $TRUE;
                break
            fi
        done
    fi
}



################################################ START ####################################################

# Exit script if no branch name is provided
if [[ -z "${1:-}" ]]; then
    printf 'Error: Please specify a branch name.\n'
    exit $FALSE
fi

target="$1"

# Find all branches
#TODO::swich immidiatly if exact match find
branches=($(find_branches "$target" ))
# validate
if [[ $? -eq $FALSE ]]; then
    exit $FALSE
fi

# Select the needed branch
options=($(prepare_options "${branches[@]}" "$target" ))
option=($(select_option "${options[@]}"))
branch=$(remove_highlight "$option")

# validate
if [[ -z "${branch:-}" ]]; then
    printf 'Error: No branch selected.\n'
    exit $FALSE
fi

handle_unsaved_file
# validate
if [[ $? -eq $FALSE ]]; then
    exit $FALSE
fi

swich_to "${branch}"
handle_stash "${branch}"