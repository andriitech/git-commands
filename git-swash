#!/bin/bash

# Exit if a command returns a non-zero exit code
set -euo pipefail

# Set ANSI escape codes for text formatting
RED='\033[0;31m'
GREEN='\033[0;32m'
BLUE='\033[0;34m'
NC='\033[0m'

# Define the color codes
HIGHLIGHT_YELLOW=$'\e[1;33m' 
HIGHLIGHT_NC=$'\e[0;0m'

# Helper function to check for unsaved changes in the working directory
function unsaved_files {
    local files=$(git diff-index HEAD) || true
    if [[ -n "$files" ]]; then
        printf 'true\n'
    else
        printf 'false\n'
    fi
}


######## SELECT BRANCH ############

# Exit script if no branch name is provided
if [[ -z "${1:-}" ]]; then
    printf 'Error: Please specify a branch name.\n'
    exit 1
fi

target="$1"

# Find branches with similar name
branch_list=($(git branch -ila "*$target*")) || true

# Exit script if no matching branches are found
if [[ ${#branch_list[@]} -eq 0 ]]; then
    printf 'Error: No branches found matching the name %s.\n' "$target"
    exit 1
fi

branches=()
target_lower=$(echo "$target" | tr '[:lower:]' '[:upper:]')
target_upper=$(echo "$target" | tr '[:upper:]' '[:lower:]' )
# Loop over each element in the array and perform a case-insensitive comparison
for branch in "${branch_list[@]}"; do
    if [[ "$branch" =~ ${target_lower} ]]; then
        branches+=("${branch/$target_lower/$'${HIGHLIGHT_YELLOW}$target_lower${HIGHLIGHT_NC}'}")
    else
        branches+=("${branch/$target_upper/$'${HIGHLIGHT_YELLOW}$target_upper${HIGHLIGHT_NC}'}")
    fi
done

# Loop through branches and highlight the given keyword
# branches=("${branches[@]/$target/$'${HIGHLIGHT_YELLOW}$target${HIGHLIGHT_NC}'}")

# Select the needed branch
if [[ ${#branches[@]} -gt 1 ]]; then
    PS3="Select a branch option: "
    select branch in "${branches[@]}"; do
    # Check if the selected option is in the list of available options
    if [[ " ${branches[@]} " =~ " ${branch} " ]]; then
        break
    else
        echo "Invalid option. Please select a valid option."
    fi
done
else
    branch=${branches[0]}
fi

# Remove color codes from the selceted branch
branch=${branch/${HIGHLIGHT_YELLOW}}
branch=${branch/${HIGHLIGHT_NC}}

# Checkout unsaved changes
if unsaved_files | grep -q '^true$'; then
    read -rp "There are unsaved changes in the working directory. Stash (s), commit (c) or ignore (i)? : " answer
    case "$answer" in
        stash|[sS])
            git stash save "stash for $(git rev-parse --abbrev-ref HEAD)" || exit 1
            printf 'Unsaved changes have been stashed.\n';;
        commit|[cC])
            read -rp "Please provide a commit message: " commit_message
            git add . || exit 1
            git commit -m "$commit_message" || exit 1
            printf 'Unsaved changes have been committed with message: %s\n' "$commit_message";;
        ignore|[iI])
            git reset --hard HEAD || exit 1;;
        *)
            printf 'Invalid option. No changes were made.\n'
            exit 1;;
    esac
fi

# Make sure a branch is selected
if [[ -z "${branch:-}" ]]; then
    printf 'Error: No branch selected.\n'
    exit 1
fi

echo "$branch"
git checkout "${branch}" || exit 1
printf 'Checked out to branch %s.\n' "$branch"




######## SELECT STASH ############
#TODO:: make it less ugly

# Check for stashes with the current branch
declare -a stash_list
while IFS= read -r line; do
    stash_list+=("$line")
done < <(git stash list | grep "$branch")

# Pop if only one stash
if [ ${#stash_list[@]} -eq 1 ]; then
    # remove evetying after first `:`
    stash=${stash_list[0]%%:*}
    #get stash index
    index=$(echo "$stash" | sed -nE 's/stash@\{([0-9]+)\}/\1/p')
    git stash pop --index "${index}"
fi


# Select if more then one
if [ ${#stash_list[@]} -gt 1 ]; then
    stashes=()
    # Loop over each element in the array and perform a case-insensitive comparison
    for stash in "${stash_list[@]}"; do
        if [[ "$stash" =~ ${target_lower} ]]; then
            stashes+=("${stash/$target_lower/$'${HIGHLIGHT_YELLOW}$target_lower${HIGHLIGHT_NC}'}")
        else
            stashes+=("${stash/$target_upper/$'${HIGHLIGHT_YELLOW}$target_upper${HIGHLIGHT_NC}'}")
        fi
    done

    PS3="Select an stash option to pop: "
    select stash in "${stashes[@]}"; do
        if [[ -n $stash ]]; then
            # remove evetying after first `:`
            stash=${stash%%:*}
            index=$(echo "$stash" | sed -nE 's/stash@\{([0-9]+)\}/\1/p') 
            git stash pop --index "${index}"
            break
        else
            echo "Invalid selection. Please choose again."
        fi
    done
fi